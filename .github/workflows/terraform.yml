name: 'Terraform'

on:
#   push:
#     branches: [ "main" ]
#   pull_request:
  workflow_dispatch:
    inputs:
        product_name:
          description: 'Name of product'
          required: true
          default: 'productname'
        environment:
          type: choice
          description: 'Environment Name'
          options:
          - dev
          - staging
          - prod
          default: dev
        domain_name:
          description: 'Domain Name'
          required: true
          default: 'demo.com'


permissions:
  contents: read

env:
  AWS_REGION: ap-southeast-1
#   AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#   AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  
jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./aws-ecs

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
    - name: Create AWS profile
      # You may pin to the exact commit or the version.
      # uses: Fooji/create-aws-profile-action@11446e09949aa9812361b5fbe72c8b5a7e44bdd2
      uses: Fooji/create-aws-profile-action@v1
      with:
        # The AWS_ACCESS_KEY_ID
        key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        # The AWS_SECRET_ACCESS_KEY
        secret: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        # The profile name you want to setup
        profile: default
        # The AWS region you want to use
        region: ${{ env.AWS_REGION }}
        
#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v1
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: ${{ env.AWS_REGION }}
        
    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
#     - name: Terraform Format
#       run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false
      

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
#    - name: Terraform Apply
#      if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
#      run: terraform apply -auto-approve -input=false
